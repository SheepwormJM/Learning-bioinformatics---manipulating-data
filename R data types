# Using R:

###################################################################################################################################
##############################################    VECTORS   ########################################################################
###################################################################################################################################

# A vector is a single row or a single column - i.e. a 1D thing. 
# A vector can be NUMERICAL, or a CHARACTER, or a LOGICAL vector (eg. TRUE or FALSE)
# In contrast a table (data frame) is a 2D things - rowS and columnS

# To make a vector use c():
new_vector = c(“coding”,”coding”,”miRNA”,”miRNA”,”coding”,”lincRNA”,”coding”,”coding”,”coding”,”psuedo”)
another_new_vector = c(“ENSG0000012”,156.12,11,5677858,5685034,-1.56,0.00123,”True”,”True”)
# To add a new column to a dataframe can do:
table$name_for_new_column = new_vector
# Note that the new column must have the same number of rows as the dataframe itself.

# To add a vector to a data table can do:

df$new_col<- c(0, 1, 2 ,3, 4, 5) 
df$new_col<- rep(c(0, 7), times = c(4,2))
# [1] 0 0 0 0 7 7
df$new_col<- rep(c(2, 4, 2), each = 3)
# [1] 2 2 2 4 4 4 2 2 2
df$new_col<- rep(c(0, 0, 7), times = 3)
# [1] 0 0 7 0 0 7 0 0 7
de$new_col <- rep(1:3,length.out=7)
# [1] 1 2 3 1 2 3 1
# You could also create a vector using sapply() (for example), and then use rep() on the vector:
Z <- sapply(MyList,"[", 1,1 )
# Z
# [1] 1 4 8
Z<- rep(Z, c(3,1,2)) # This will repeat the vector Z, but repeating the first value 3 times, the next once, and the last twice
#  Z
# [1] 1 1 1 4 8 8
## Essentially therefore rep(VECTOR, Times_repeated) is the rough outline, but can specify what and how you want the vector repeated 
# after the initial bit. 
eg<-rep(c(1,2,3), c(2,3,2))
# eg
# [1] 1, 1, 2, 2, 2, 3, 3

# To select part of a vector:
a <- c(0,1,2,3,4,5) # creates a vector 'a' of 6 entries, which are numerical
z<-a[c(1,3)] # This will select just the first and third entries/indexes in the vector 'a'.

# You can replace a value in a vector:
a[3] = "blue" # replaces the third value with blue
a[3] = 72 # replaces the third value with 72

# How to run a simple loop using a vector:
x<-c(1:10)
for(i in x){print(log10(x[i]))} # prints the log10 of each value of x
for(i in x){print(log10(x))} # prints the log10 of each value of x 10 times over.


###################################################################################################################################
##############################################    MATRICES   ########################################################################
###################################################################################################################################

# All columns in a matrix MUST have the same mode (numeric, character, etc.) and the same length. 
# It will take your vector and turn it into a matrix.
# The general format is:

mymatrix <- matrix(vector, nrow=r, ncol=c, byrow=FALSE, dimnames=list(char_vector_rownames, char_vector_colnames))

byrow=TRUE # indicates that the matrix should be filled by rows. 
byrow=FALSE # indicates that the matrix should be filled by columns (the default). 
dimnames # provides optional labels for the columns and rows.

# generates 5 x 4 numeric matrix
y<-matrix(1:20, nrow=5,ncol=4)

     [,1] [,2] [,3] [,4]
[1,]    1    6   11   16
[2,]    2    7   12   17
[3,]    3    8   13   18
[4,]    4    9   14   19
[5,]    5   10   15   20

# another example
cells <- c(1,26,24,68)
rnames <- c("R1", "R2")
cnames <- c("C1", "C2")
mymatrix <- matrix(cells, nrow=2, ncol=2, byrow=TRUE, dimnames=list(rnames, cnames))
  
   C1 C2
R1  1 26
R2 24 68

# Identify rows, columns or elements using subscripts.
x[,4] # 4th column of matrix
x[3,] # 3rd row of matrix
x[2:4,1:3] # rows 2,3,4 of columns 1,2,3

###################################################################################################################################
##############################################    ARRAYS   ########################################################################
###################################################################################################################################

# Arrays are similar to matrices but can have more than two dimensions. See help(array) for details.

###################################################################################################################################
##############################################    DATA FRAMES   ###################################################################
###################################################################################################################################

# A data frame is more general than a matrix, in that different columns can have different modes (numeric, character, factor, etc.).

d <- c(1,2,3,4)
e <- c("red", "white", "red", NA)
f <- c(TRUE,TRUE,TRUE,FALSE)
mydata <- data.frame(d,e,f)
names(mydata) <- c("ID","Color","Passed") # variable names

# There are a variety of ways to identify the elements of a data frame .

myframe[3:5] # columns 3,4,5 of data frame
myframe[c("ID","Age")] # columns ID and Age from data frame
myframe$X1 # variable x1 in the data frame

###################################################################################################################################
##############################################    TABLES   ########################################################################
###################################################################################################################################

# Loading a table into R using read.table():
file = path to the file you want to open
sep = what character acts to separate the columns in your file. Usually \t or ,
header = true / false, do you want the first row of your file to become the names of the columns in the data.frame
row.names = which column do you want to be the row names in the data frame

expression<-read.table("EM.csv", header=T, row.names = 1)
DE<-read.table("DE_DP_mL_vs_DP_LP.csv", header=T, row.names = 1)

# If you want R to see data as data e.g. FALSE vs TRUE as opposed to just a txt string, then it needs to be a 'factor'.
# To check the level order of a factor do:
levels(table$column)
# If x were table$significant, the output would “False” “True”
# To change the order use e.g:
table$column = factor(table$column,levels= c("True","False"))
# If x were table$significant, the order would now be “True” “False”

# How many rows and columns are there?
dim(df)

# How many unique farms are there?
unique(df$farms)

# To select part of a table (data frame):

table[1,] # Select the first row
row = table[1,] # Select the first row and store in variable
col = table[,1] # Select the first column and store in variable
table[1,1] # Select the first row and column
table[1:3,1:3] # Select the first 3 rows and columns
table[c(1,2,4,7),] # Select an assortment of rows
rows_to_select = c(1,2,3,6,7) # Select an assortment of rows and columns using variables
cols_to_select = c(1,4,5)
table[rows_to_select,cols_to_select]

# Or, you could use the row or column titles:
table[“ENSG00000282221”,] # Select the first row
table[,”mean_expression”] # Select the first column
table[“ENSG00000282221”,”mean_expression”] # Select the first row and column
cols_to_select = c(“log2fold”,”p”,”chromosome”) # Select several columns using a variable
table[,cols_to_select]

# To REMOVE rows or columns from a dataframe can do the same as to select, but add a '-' sign:
table_trimmed = table[,-1] # removes first column
table_trimmed = table[-1,] # removes first row
table_trimmed = table[-c(1,2,3),] # removes first three rows

# To REMOVE rows or colums from a data frame using logicals do:
columns_to_remove = c(“HC_6”,”HC_8”)
names(table) # this returns the header row as a vector
names(table) %in% columns_to_remove # this returns “True”, “False”, “True”, “False”, “False”, “False”, “False”
table_new = table[, !names(table) %in% columns_to_remove] # as a one liner, removes the 2 columns
# it selects the columns NOT in
# columns_to_remove
table_new = table[!row.names(table) %in% rows_to_remove,] # equivalent for rows


# You could ADD columns with data returned by a function:
# This table has 9 samples - 3 each of gut, lymph and node, each in a separate column. 
# The rows are the genes. 
# I calulate the mean expression of eaech sample set. The data table is called 'expression'.
expression$gut_mean<-rowMeans(expression[,grep("gut", names(expression))])
expression$lymph_mean<-rowMeans(expression[,grep("lymph", names(expression))])
expression$node_mean<-rowMeans(expression[,grep("node", names(expression))])

# How would I select only the significant genes?
DE_table = read.table(file="DE_table_file.csv", header=TRUE, row.names = 1, sep='\t')
DE_table_sig = subset(DE_table, p.adj < 0.05)

# How would I select only the significant genes but save only the gene ID?
DE_table = read.table(file="DE_table_file.csv", header=TRUE, row.names = 1, sep='\t')
DE_table_sig_IDs = subset(DE_table, p.adj < 0.05)$ID

# The function subset() is for selecting data that is identical to a certain 'thing' or that meets certain requirements: 
table_subset = subset(table, chromosome == 1) # select only rows with chromosome 1
table_subset = subset(table, log2fold > 0) # select only rows with positive fold
table_subset = subset(table, log2fold > 0 & p < 0.05) # select only significant rows with positive fold

# To re-order rows or columns use:
# Option 1. By index.
# If we supply a list of column or row indexes to the data frame the resulting order will be as the list. Obviously
# this will also remove any rows/ columns that aren’t included the order list.
new_order = c(5,4,3,2,1)
table_row_ordered = table[new_order,] # Makes a table of the first 5 rows in reverse order
table_col_ordered = table[,new_order] # Makes a table of the first 5 columns in reverse order

# Option 2. By ID.
# Exactly as above, but ordering by id
new_order = c(“replicate_5”, “replicate_4”, “replicate_3”, “replicate_2”, “replicate_1”)
table_row_ordered = table[new_order,] # Makes a table of the first 5 rows in reverse order
table_col_ordered = table[,new_order] # Makes a table of the first 5 columns in reverse order

# Note, can also use the above to duplicate a column - e.g. new_order = c(1,1,1,1)

# To SORT data by values in a column: 
# We can also formally sort all rows / columns by value.
order(my_table$p) # returns a list of ROW INDEXES for the rows sorted by column p.
my_table_sorted = my_table[order(my_table$p),] # sorts the rows by value of p coumn INCREASING value
my_table_sorted = my_table[order(-my_table$p),] # sorts the rows by value of p column DECREASING value

# To sort a factor:
## Hmmm, so the Raing is not being seen in the correct order - <20, >40, 20-30, 30-40. 
# To re-order can do:
fe_ordered<-ordered(fe$Raing, levels = c("<20", "20-30", "30-40", ">40"))
fe$Raingord<-fe_ordered
class(fe$Raingord)
# "ordered" "factor"
f
# To RE-NAME column headers or row names:
# Columns
names(table) = c(“HC1”,”HC2”,”HC3”,”HC4”,”HC5”,”HC6”,”HC7”) # supply a new list of names
# Rows
row.names(table) = c(“gene1”,”gene2”,”gene3”,“gene4”,”gene5”,”gene6”,“gene6”,”gene7”,”gene8”,”gene9”)

# To combine tables by adding additional columns, or additional rows:

# By Column:
# Assumes the rows are the same and adds table 2 as a series of new columns to table 1.
combined_table = cbind(table1,table2)
# By Row:
# Assumes the column headers are the same in each table (and same order?) and adds table 2 as new rows below table 1.
combined_table = rbind(table1,table2)

# How would I merge the expression and differential expression tables?
DE_table = read.table(file="DE_table_file.csv", header=TRUE, row.names = 1, sep='\t')
E_table = read.table(file="E_table_file.csv", header=TRUE, row.names = 1, sep='\t')
merged_data = merge(DE_table, E_table, by=0)
# Note, that, in the above line, by=0 represents the row names. Could also put by="ID", or by="SHEEP_ID" etc.
# Note that in order to merge two tables, the column header must be the SAME in each table.
# The default behaviour of merge() is to keep only rows that are the same in both tables. 
#### @@@@ ##### Important - after merging, the rownames become column 1!
# Re-make the rownames (as are now column 1, and get called Row.names)
row.names(new)<-new$Row.names
head(new)
# Note, good but now have to remove the col Row.names
new_EM<-new[,-1]
head(new_EM)


## I'm melting! I'm melting!
# To get a table to change from:
Sheep_ID  FEC_1  FEC_2
Sheep_1 100 53  
Sheep_2 300 23

# To:
Sheep_ID  FEC Value
Sheep_1 1 100
Sheep_1 2 53
Sheep_2 1 300
Sheep_2 2 23

# Then you want to MELT the table:
install.packages(“reshape2”)
table_melted = melt(table)

# I think it will melt every column, keeping the first column as was (but obiously with many more rows), and all additional
# columns will become under col_2, with their row values under col_3.

### Other useful functions:
nrow(table) # gets the number of rows in the data frame
ncol(table) # gets the number of columns in the data frame
head(table,n) # returns the first n rows
tail(table,n) # returns the last n rows
t(table) # transposes the data frame *but returns a matrix.
data.frame(A, B, C, stringsAsFactors=FALSE) # Makes a dataframe from three vectors (A, B and C), and retains the vector class. Otherwise would turn
# them into factors, which can have levels, and can influence downstream code/functions etc. The dataframe can have variables of different
# classes, unlike a matrix (matrix()) wich makes everything a character if there is non-numerical data in it. 
data.frame(table) # casts a matrix into a data frame
table_transposed = data.frame(t(table)) # transpose and cast back
cor(table) # returns a matrix of correlations
names(table) # accesses the column names
row.names(table) # accesses the row names
scale(table) # converts values to z-score. Be careful… it works by col not row.
str() # Provides information on the structure and classes of data within a dataframe.


########## SAVE #################
# To save a data frame as a file use write.table()
write.table(my_table, file="new_file.csv", row.names=FALSE, sep="\t", quote= FALSE) # saves the frame to a file

# To save the entire R environment to disc and then reload it use save.image()
save.image(“R_environment_file.rdata”)
load(“R_environment_file.rdata”)



###################################################################################################################################
##############################################    LISTS   #########################################################################
###################################################################################################################################

# An ordered collection of objects (components). A list allows you to gather a variety of (possibly unrelated) objects under one name.

# example of a list with 4 components -
# a string, a numeric vector, a matrix, and a scaler
w <- list(name="Fred", mynumbers=a, mymatrix=y, age=5.3)

> w
$name
[1] "Fred"

$mynumbers
[1] 0 1 2 3 4 5

$mymatrix
     [,1] [,2] [,3] [,4]
[1,]    1    6   11   16
[2,]    2    7   12   17
[3,]    3    8   13   18
[4,]    4    9   14   19
[5,]    5   10   15   20

$age
[1] 5.3

# example of a list containing two lists
v <- c(list1,list2)

# Identify elements of a list using the [[]] convention.
mylist[[2]] # 2nd component of the list
mylist[["mynumbers"]] # component named mynumbers in list




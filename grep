# grep commands


grep selects lines according to what they contain. In its simplest form, grep takes a piece of text followed by one or more filenames and prints all of the lines in those files that contain that text. For example, grep bicuspid seasonal/winter.csv prints lines from winter.csv that contain "bicuspid".

grep can search for patterns as well; we will explore those in the next course. What's more important right now is some of grep's more common flags:

-c: print a count of matching lines rather than the lines themselves
-h: do not print the names of files when searching multiple files
-i: ignore case (e.g., treat "Regression" and "regression" as matches)
-l: print the names of files that contain matches, not the matches
-n: print line numbers for matching lines
-v: invert the match, i.e., only show lines that don't match


# to extract a scaffold from a genome:
# Note - this extracted the whole scaffold. 
find . -name "tc_171026.fa" | xargs grep -E '>scaffold2239,*' -A 1 > scaffold_2239

# But this did NOT extract the whole transcript. :( 
find . -name "WBPS15gff3_pep.fasta" | xargs grep -E '*-00002' -A 1 > Second_transcripts
# I think because the genome file has the scaffold on a single line, while the fasta file from Roz reads it as separate lines. 
# Instead - use the command above to get the names of the genes:

find . -name "WBPS15gff3_pep.fasta" | xargs grep -E '*-00002'> Second_transcripts

# Make the genelist for the gene name alone (Roz's file had gene=Hcon etc as an additional bit after a space which was mucking stuff up).
awk '{print $1}' Second_transcripts  | sed 's/>//g' > Second_transcripts_GENELIST.txt

# You will also need to make Roz's file have just the gene name in it (.* means continue until I tell you to stop - in this case until the end of the line)
# Note that the space is important! Otherwise you still get a space after the gene name on the header line. 
sed 's/ gene=H.*//g' WBPS15gff3_pep.fasta > new_WBPS15gff3_pep.fasta

# Then take this genelist and do the following:
while read NAME; do samtools faidx new_WBPS15gff3_pep.fasta ${NAME} >> \
Second_transcript_WBPS15gff3_pep.fasta; done < \
Second_transcripts_GENELIST.txt

# Worked! 

# So to get just the primary transcripts:
find . -name "WBPS15gff3_pep.fasta" | xargs grep -E '*-00001'> Primary_transcripts
awk '{print $1}' Primary_transcripts  | sed 's/>//g' > Primary_transcripts_GENELIST.txt



#!/bin/sh
#PBS -l walltime=50:00:00
#PBS -l cput=50:00:00
#PBS -l nodes=1:centos6

while read NAME; do samtools faidx new_WBPS15gff3_pep.fasta ${NAME} >> \
Primary_transcript_WBPS15gff3_pep.fasta; done < \
Primary_transcripts_GENELIST.txt





# To get contig 7 extracted: 
awk '/>7$/,/>8$/' tc_171026.renamed.fa > scaffold_7
find . -name "WBPS15gff3_pep.fasta" | awk '/>*-00002$/,/>-00003$/' > Second_transcripts_b

# To try to get ALL (head and non-head) contig 7 SNPs into a text file for plotting in R, to do for 4to6 
# (note the ^ means it has to be at hte start of a line, the $ and the \t means it has a tab straight after the 7 and the ' ' means that exact phrase:

grep $'^7\t' poolseq.mc5.fst_4to6.igv > contig7_4to6.fst.igv


# To get a range of numbers: 
egrep "08:[2][5-9]:[0-5][0-9]|08:[3][0-5]:[0-5][0-9]" file
egrep "HiC_scaffold_[1-6]" file > new_file  # Note that this selected everything which had a 1-6 after the _, including ones that were 3845... as opposed to just 3!



